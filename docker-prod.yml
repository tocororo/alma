version: '2.2'
services:
  app:
    build:
      context: ./
      args:
        - ENVIRONMENT=PROD
    image: alma:prod
    restart: unless-stopped
    networks:
      - backend
      - frontend
    environment:
      - INVENIO_ACCOUNTS_SESSION_REDIS_URL=redis://cache:6379/1
      - INVENIO_BROKER_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@mq:5672/
      - INVENIO_CACHE_REDIS_URL=redis://cache:6379/0
      - INVENIO_CACHE_TYPE=redis
      - INVENIO_CELERY_BROKER_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@mq:5672/
      - INVENIO_CELERY_RESULT_BACKEND=redis://cache:6379/2
      - INVENIO_COMMUNITIES_IDENTITIES_CACHE_REDIS_URL=redis://cache:6379/4
      - INVENIO_SEARCH_HOSTS=search:9200
      - INVENIO_SECRET_KEY=${APP_SECRET_KEY}
      - INVENIO_SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@db/alma
      - INVENIO_WSGI_PROXIES=2
      - INVENIO_RATELIMIT_STORAGE_URL=redis://cache:6379/3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  frontend:
    image: alma-frontend:prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend
    depends_on:
      - app

  cache:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - backend
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  db:
    image: postgres:14-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=alma
    networks:
      - backend
    volumes:
      - pg_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s

  mq:
    image: rabbitmq:3-management-alpine
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - backend
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          memory: 512M

  search:
    image: opensearchproject/opensearch:2.17.1
    restart: unless-stopped
    environment:
      - bootstrap.memory_lock=true
      - OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g
      - discovery.type=single-node
      - plugins.security.disabled=false
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_ADMIN_PASSWORD}
    networks:
      - backend
    volumes:
      - os_data:/usr/share/opensearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 4G

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.17.1
    restart: unless-stopped
    environment:
      - OPENSEARCH_HOSTS=['https://search:9200']
      - OPENSEARCH_USERNAME=admin
      - OPENSEARCH_PASSWORD=${OPENSEARCH_ADMIN_PASSWORD}
      - OPENSEARCH_SSL_VERIFICATIONMODE=none
    networks:
      - backend
    depends_on:
      - search

volumes:
  pg_data:
  redis_data:
  rabbitmq_data:
  os_data:

networks:
  frontend:
  backend:

# Note: Create a .env file with these variables:
# DB_USER=prod_user
# DB_PASSWORD=strong_password
# RABBITMQ_USER=prod_mq_user
# RABBITMQ_PASSWORD=strong_mq_password
# REDIS_PASSWORD=strong_redis_password
# APP_SECRET_KEY=generated_secret_key
# OPENSEARCH_ADMIN_PASSWORD=strong_opensearch_password